{"version":3,"file":"setup.min.js","sources":["../src/setup.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * LearnWise setup module for managing plugin configuration interface.\n * Handles floating button, LTI integration, web services, and live API settings.\n *\n * @module     local_learnwise/setup\n * @copyright  2025 LearnWise <help@learnwise.ai>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n    [M.cfg.wwwroot + '/local/learnwise/vendorjs/zenorocha/clipboard.min.js',\n        'core/str', 'core/notification', 'core/fragment', 'core/config', 'core/templates'],\n    function(ClipboardJS, Str, Notification, Fragment, Config, Templates) {\n\n    /**\n     * Application state object containing all configuration settings\n     * @type {Object}\n     * @property {string} environment - Current environment (sandbox/production)\n     * @property {string} floatingButtonAssistantId - Assistant ID for floating button\n     * @property {boolean} showFloatingButton - Whether floating button is enabled\n     * @property {string} ltiAssistantId - Assistant ID for LTI integration\n     * @property {boolean} ltiEnabled - Whether LTI integration is enabled\n     * @property {boolean} webServicesEnabled - Whether web services are enabled\n     * @property {boolean} liveApiEnabled - Whether live API is enabled\n     * @property {boolean} showToast - Whether to show toast notifications\n     */\n    var state = {\n        environment: \"sandbox\",\n        floatingButtonAssistantId: \"\",\n        showFloatingButton: false,\n        ltiAssistantId: \"\",\n        ltiEnabled: false,\n        webServicesEnabled: false,\n        liveApiEnabled: false,\n    };\n\n    /**\n     * DOM elements cache for efficient access to form elements and controls\n     * @type {Object}\n     */\n    var elements = {\n        form: document.getElementById('form1'),\n        floatingButtonAssistantId: document.getElementById(\"floatingButtonAssistantId\"),\n        floatingButtonSwitch: document.getElementById(\"floatingButtonSwitch\"),\n        floatingButtonStatus: document.getElementById(\"floatingButtonStatus\"),\n        floatingButtonSwitchWrapper: document.getElementById(\"floatingButtonSwitchWrapper\"),\n        floatingButtonTooltip: document.getElementById(\"floatingButtonTooltip\"),\n\n        ltiAssistantId: document.getElementById(\"ltiAssistantId\"),\n        ltiSwitch: document.getElementById(\"ltiSwitch\"),\n        ltiStatus: document.getElementById(\"ltiStatus\"),\n        ltiSwitchWrapper: document.getElementById(\"ltiSwitchWrapper\"),\n        ltiTooltip: document.getElementById(\"ltiTooltip\"),\n        ltiConfig: document.getElementById(\"ltiConfig\"),\n\n        webServicesSwitch: document.getElementById(\"webServicesSwitch\"),\n        webServicesStatus: document.getElementById(\"webServicesStatus\"),\n        webServicesConfig: document.getElementById(\"webServicesConfig\"),\n\n        liveApiSwitch: document.getElementById(\"liveApiSwitch\"),\n        liveApiStatus: document.getElementById(\"liveApiStatus\"),\n        liveApiConfig: document.getElementById(\"liveApiConfig\"),\n\n        ltiRemovalModal: document.getElementById(\"ltiRemovalModal\"),\n        closeLtiModal: document.getElementById(\"closeLtiModal\"),\n        confirmLtiRemoval: document.getElementById(\"confirmLtiRemoval\")\n    };\n\n    // Initialize state from form values\n    if (elements.floatingButtonAssistantId) {\n        state.floatingButtonAssistantId = elements.floatingButtonAssistantId.value;\n    }\n\n    if (elements.ltiAssistantId) {\n        state.ltiAssistantId = elements.ltiAssistantId.value;\n    }\n\n    if (elements.floatingButtonStatus) {\n        state.showFloatingButton = parseInt(elements.form.elements.floatingButtonStatus.value) === 1;\n    }\n\n    if (elements.ltiStatus) {\n        state.ltiEnabled = parseInt(elements.form.elements.ltiStatus.value) === 1;\n    }\n\n    if (elements.webServicesStatus) {\n        state.webServicesEnabled = parseInt(elements.form.elements.webServicesStatus.value) === 1;\n    }\n\n    if (elements.liveApiStatus) {\n        state.liveApiEnabled = parseInt(elements.form.elements.liveApiStatus.value) === 1;\n    }\n\n    /**\n     * Initializes all event listeners for the setup interface.\n     * Sets up handlers for input changes, switch toggles, modal interactions,\n     * and clipboard functionality.\n     *\n     * @function initializeEventListeners\n     * @private\n     */\n    function initializeEventListeners() {\n        // Floating button assistant ID input\n        elements.floatingButtonAssistantId.addEventListener(\"input\", function(e) {\n            state.floatingButtonAssistantId = e.target.value;\n            updateFloatingButtonSwitch();\n        });\n\n        // LTI assistant ID input\n        if (elements.ltiAssistantId) {\n            elements.ltiAssistantId.addEventListener(\"input\", function(e) {\n                state.ltiAssistantId = e.target.value;\n                updateLtiSwitch();\n            });\n        }\n\n        // Floating button switch\n        elements.floatingButtonSwitch.addEventListener(\"click\", function() {\n            if (canEnableFloatingButton()) {\n                state.showFloatingButton = !state.showFloatingButton;\n                updateFloatingButtonSwitch();\n            }\n        });\n\n        // Web services switch\n        elements.webServicesSwitch.addEventListener(\"click\", function() {\n            state.webServicesEnabled = !state.webServicesEnabled;\n            updateWebServicesSwitch();\n        });\n\n        // Live API switch\n        elements.liveApiSwitch.addEventListener(\"click\", function() {\n            state.liveApiEnabled = !state.liveApiEnabled;\n            updateLiveApiSwitch();\n        });\n\n        // Modal close on overlay click\n        elements.ltiRemovalModal.addEventListener(\"click\", function(e) {\n            if (e.target === elements.closeLtiModal) {\n                closeLtiModal();\n            }\n            if (e.target === elements.confirmLtiRemoval) {\n                confirmLtiRemoval();\n            }\n            if (e.target === elements.ltiRemovalModal) {\n                closeLtiModal();\n            }\n        });\n\n        // Environment radio buttons\n        var environmentRadios = document.querySelectorAll('input[name=\"environment\"]');\n        environmentRadios.forEach(function(radio) {\n            if (radio.checked) {\n                state.environment = radio.value;\n            }\n            radio.addEventListener(\"change\", function(e) {\n                if (e.target.checked) {\n                    state.environment = e.target.value;\n                    updateLtiConfig();\n                }\n            });\n        });\n\n        // LTI switch\n        if (elements.ltiSwitch) {\n            elements.ltiSwitch.addEventListener(\"click\", function() {\n                if (canEnableLti()) {\n                    if (state.ltiEnabled) {\n                        // Show confirmation modal\n                        elements.ltiRemovalModal.style.display = \"flex\";\n                    } else {\n                        state.ltiEnabled = true;\n                        updateLtiSwitch();\n                    }\n                }\n            });\n        }\n\n        // Initialize clipboard functionality\n        var clipboardInstance = new ClipboardJS('.copy-btn');\n        clipboardInstance.on('success', function(e) {\n            e.clearSelection();\n            Str.get_string('copied', 'local_learnwise')\n            .then(function(str) {\n                if (state.showToast) {\n                    require(['core/toast'], function(Toast) {\n                        Toast.add(str);\n                    });\n                } else {\n                    // eslint-disable-next-line no-alert\n                    alert(str);\n                }\n                return null;\n            })\n            .catch(Notification.exception);\n        });\n    }\n\n    /**\n     * Checks if the floating button can be enabled based on current state.\n     * Requires a valid assistant ID to be present.\n     *\n     * @function canEnableFloatingButton\n     * @private\n     * @returns {boolean} True if floating button can be enabled, false otherwise\n     */\n    function canEnableFloatingButton() {\n        return state.floatingButtonAssistantId.trim().length > 0;\n    }\n\n    /**\n     * Checks if LTI integration can be enabled based on current state.\n     * Requires a valid LTI assistant ID to be present.\n     *\n     * @function canEnableLti\n     * @private\n     * @returns {boolean} True if LTI can be enabled, false otherwise\n     */\n    function canEnableLti() {\n        return state.ltiAssistantId.trim().length > 0;\n    }\n\n    /**\n     * Updates the floating button switch UI and form state.\n     * Handles enabling/disabling the switch based on assistant ID availability,\n     * updates visual states, and synchronizes with form values.\n     *\n     * @function updateFloatingButtonSwitch\n     * @private\n     */\n    function updateFloatingButtonSwitch() {\n        var canEnable = canEnableFloatingButton();\n\n        if (canEnable) {\n            elements.floatingButtonSwitch.classList.remove(\"disabled\");\n            elements.floatingButtonSwitchWrapper.style.cursor = \"pointer\";\n            elements.floatingButtonTooltip.style.display = \"none\";\n\n            if (state.showFloatingButton) {\n                elements.floatingButtonSwitch.classList.add(\"active\");\n                Str.get_string('statusenabled', 'local_learnwise').then(function(str) {\n                    elements.floatingButtonStatus.textContent = str;\n                    return null;\n                }).fail(Notification.exception);\n            } else {\n                elements.floatingButtonSwitch.classList.remove(\"active\");\n                Str.get_string('statusdisabled', 'local_learnwise').then(function(str) {\n                    elements.floatingButtonStatus.textContent = str;\n                    return null;\n                }).fail(Notification.exception);\n            }\n        } else {\n            elements.floatingButtonSwitch.classList.remove(\"active\");\n            elements.floatingButtonSwitch.classList.add(\"disabled\");\n            elements.floatingButtonSwitchWrapper.style.cursor = \"not-allowed\";\n            Str.get_string('statusdisabled', 'local_learnwise').then(function(str) {\n                elements.floatingButtonStatus.textContent = str;\n                return null;\n            }).fail(Notification.exception);\n            state.showFloatingButton = false;\n        }\n        elements.form.elements.floatingButtonStatus.value = state.showFloatingButton ? 1 : 0;\n    }\n\n    /**\n     * Updates the LTI configuration section by loading dynamic content.\n     * Fetches and renders LTI configuration HTML based on current state\n     * including environment and assistant ID settings.\n     *\n     * @function updateLtiConfig\n     * @private\n     */\n    function updateLtiConfig() {\n        if (!elements.ltiConfig || !canEnableLti() || !state.ltiEnabled) {\n            return;\n        }\n        Fragment.loadFragment('local_learnwise', 'process_setup', Config.contextid, {\n                formdata: 'enablelti=' + (state.ltiEnabled ? 1 : 0) +\n            '&assistantid=' + encodeURIComponent(elements.ltiAssistantId.value) +\n            '&environment=' + encodeURIComponent(state.environment)\n        }).then(function(html, js) {\n            Templates.replaceNodeContents(elements.ltiConfig, html, js);\n            return null;\n        }).catch(Notification.exception);\n    }\n\n    /**\n     * Updates the LTI switch UI and configuration visibility.\n     * Manages the LTI integration toggle state, updates visual indicators,\n     * and shows/hides the LTI configuration section accordingly.\n     *\n     * @function updateLtiSwitch\n     * @private\n     */\n    function updateLtiSwitch() {\n        if (!elements.ltiAssistantId) {\n            return;\n        }\n        var canEnable = canEnableLti();\n\n        if (canEnable) {\n            elements.ltiSwitch.classList.remove(\"disabled\");\n            elements.ltiSwitchWrapper.style.cursor = \"pointer\";\n            elements.ltiTooltip.style.display = \"none\";\n\n            if (state.ltiEnabled) {\n                elements.ltiSwitch.classList.add(\"active\");\n                Str.get_string('statusenabled', 'local_learnwise').then(function(str) {\n                    elements.ltiStatus.textContent = str;\n                    return null;\n                }).catch(Notification.exception);\n                elements.ltiConfig.style.display = \"block\";\n            } else {\n                elements.ltiSwitch.classList.remove(\"active\");\n                Str.get_string('statusdisabled', 'local_learnwise').then(function(str) {\n                    elements.ltiStatus.textContent = str;\n                    return null;\n                }).catch(Notification.exception);\n                elements.ltiConfig.style.display = \"none\";\n            }\n            updateLtiConfig();\n        } else {\n            elements.ltiSwitch.classList.remove(\"active\");\n            elements.ltiSwitch.classList.add(\"disabled\");\n            elements.ltiSwitchWrapper.style.cursor = \"not-allowed\";\n            Str.get_string('statusdisabled', 'local_learnwise').then(function(str) {\n                elements.ltiStatus.textContent = str;\n                return null;\n            }).catch(Notification.exception);\n            elements.ltiConfig.style.display = \"none\";\n            state.ltiEnabled = false;\n        }\n        elements.form.elements.ltiStatus.value = state.ltiEnabled ? 1 : 0;\n    }\n\n    /**\n     * Updates the web services switch UI and configuration.\n     * Toggles web services functionality, updates status display,\n     * and loads dynamic configuration content via Fragment API.\n     *\n     * @function updateWebServicesSwitch\n     * @private\n     */\n    function updateWebServicesSwitch() {\n        if (state.webServicesEnabled) {\n            elements.webServicesSwitch.classList.add(\"active\");\n            Str.get_string('statusenabled', 'local_learnwise').then(function(str) {\n                elements.webServicesStatus.textContent = str;\n                return null;\n            }).catch(Notification.exception);\n            elements.webServicesConfig.style.display = \"block\";\n        } else {\n            elements.webServicesSwitch.classList.remove(\"active\");\n            Str.get_string('statusdisabled', 'local_learnwise').then(function(str) {\n                elements.webServicesStatus.textContent = str;\n                return null;\n            }).catch(Notification.exception);\n            elements.webServicesConfig.style.display = \"none\";\n        }\n        Fragment.loadFragment('local_learnwise', 'process_setup', Config.contextid, {\n            formdata: 'enablewebservice=' + (state.webServicesEnabled ? 1 : 0)\n        }).then(function(html, js) {\n            Templates.replaceNodeContents(elements.webServicesConfig, html, js);\n            return null;\n        }).catch(Notification.exception);\n\n        elements.form.elements.webServicesStatus.value = state.webServicesEnabled ? 1 : 0;\n    }\n\n    /**\n     * Updates the live API switch UI and configuration visibility.\n     * Manages live API functionality toggle, updates status indicators,\n     * and controls the display of related configuration sections.\n     *\n     * @function updateLiveApiSwitch\n     * @private\n     */\n    function updateLiveApiSwitch() {\n        if (state.liveApiEnabled) {\n            elements.liveApiSwitch.classList.add(\"active\");\n            Str.get_string('statusenabled', 'local_learnwise').then(function(str) {\n                elements.liveApiStatus.textContent = str;\n                return null;\n            }).catch(Notification.exception);\n            elements.liveApiConfig.style.display = \"block\";\n        } else {\n            elements.liveApiSwitch.classList.remove(\"active\");\n            Str.get_string('statusdisabled', 'local_learnwise').then(function(str) {\n                elements.liveApiStatus.textContent = str;\n                return null;\n            }).catch(Notification.exception);\n            elements.liveApiConfig.style.display = \"none\";\n        }\n        elements.form.elements.liveApiStatus.value = state.liveApiEnabled ? 1 : 0;\n    }\n\n    /**\n     * Closes the LTI removal confirmation modal.\n     * Hides the modal dialog by setting display style to none.\n     *\n     * @function closeLtiModal\n     * @private\n     */\n    function closeLtiModal() {\n        elements.ltiRemovalModal.style.display = \"none\";\n    }\n\n    /**\n     * Confirms LTI removal and updates the interface.\n     * Disables LTI integration, updates the switch state,\n     * and closes the confirmation modal.\n     *\n     * @function confirmLtiRemoval\n     * @private\n     */\n    function confirmLtiRemoval() {\n        state.ltiEnabled = false;\n        updateLtiSwitch();\n        closeLtiModal();\n    }\n\n    /**\n     * Public API for the setup module.\n     * Provides initialization method to set up the entire interface.\n     *\n     * @namespace\n     * @public\n     */\n    return {\n        /**\n         * Initializes the LearnWise setup interface.\n         * Sets up event listeners, initializes state, and updates all UI components.\n         *\n         * @function init\n         * @param {boolean} showToast - Whether to show toast notifications for user feedback\n         * @public\n         */\n        init: function(showToast) {\n            state.showToast = showToast;\n            initializeEventListeners();\n\n            // Initial state updates\n            updateFloatingButtonSwitch();\n            updateLtiSwitch();\n            updateWebServicesSwitch();\n            updateLiveApiSwitch();\n        }\n    };\n\n});"],"names":["define","M","cfg","wwwroot","ClipboardJS","Str","Notification","Fragment","Config","Templates","state","environment","floatingButtonAssistantId","showFloatingButton","ltiAssistantId","ltiEnabled","webServicesEnabled","liveApiEnabled","elements","form","document","getElementById","floatingButtonSwitch","floatingButtonStatus","floatingButtonSwitchWrapper","floatingButtonTooltip","ltiSwitch","ltiStatus","ltiSwitchWrapper","ltiTooltip","ltiConfig","webServicesSwitch","webServicesStatus","webServicesConfig","liveApiSwitch","liveApiStatus","liveApiConfig","ltiRemovalModal","closeLtiModal","confirmLtiRemoval","initializeEventListeners","addEventListener","e","target","value","updateFloatingButtonSwitch","updateLtiSwitch","canEnableFloatingButton","updateWebServicesSwitch","updateLiveApiSwitch","querySelectorAll","forEach","radio","checked","updateLtiConfig","canEnableLti","style","display","on","clearSelection","get_string","then","str","showToast","require","Toast","add","alert","catch","exception","trim","length","classList","remove","cursor","textContent","fail","loadFragment","contextid","formdata","encodeURIComponent","html","js","replaceNodeContents","parseInt","init"],"mappings":";;;;;;;;AAuBAA,+BACI,CAACC,EAAEC,IAAIC,QAAU,uDACb,WAAY,oBAAqB,gBAAiB,cAAe,mBACrE,SAASC,YAAaC,IAAKC,aAAcC,SAAUC,OAAQC,eAcvDC,MAAQ,CACRC,YAAa,UACbC,0BAA2B,GAC3BC,oBAAoB,EACpBC,eAAgB,GAChBC,YAAY,EACZC,oBAAoB,EACpBC,gBAAgB,GAOhBC,SAAW,CACXC,KAAMC,SAASC,eAAe,SAC9BT,0BAA2BQ,SAASC,eAAe,6BACnDC,qBAAsBF,SAASC,eAAe,wBAC9CE,qBAAsBH,SAASC,eAAe,wBAC9CG,4BAA6BJ,SAASC,eAAe,+BACrDI,sBAAuBL,SAASC,eAAe,yBAE/CP,eAAgBM,SAASC,eAAe,kBACxCK,UAAWN,SAASC,eAAe,aACnCM,UAAWP,SAASC,eAAe,aACnCO,iBAAkBR,SAASC,eAAe,oBAC1CQ,WAAYT,SAASC,eAAe,cACpCS,UAAWV,SAASC,eAAe,aAEnCU,kBAAmBX,SAASC,eAAe,qBAC3CW,kBAAmBZ,SAASC,eAAe,qBAC3CY,kBAAmBb,SAASC,eAAe,qBAE3Ca,cAAed,SAASC,eAAe,iBACvCc,cAAef,SAASC,eAAe,iBACvCe,cAAehB,SAASC,eAAe,iBAEvCgB,gBAAiBjB,SAASC,eAAe,mBACzCiB,cAAelB,SAASC,eAAe,iBACvCkB,kBAAmBnB,SAASC,eAAe,+BAoCtCmB,2BAELtB,SAASN,0BAA0B6B,iBAAiB,SAAS,SAASC,GAClEhC,MAAME,0BAA4B8B,EAAEC,OAAOC,MAC3CC,gCAIA3B,SAASJ,gBACTI,SAASJ,eAAe2B,iBAAiB,SAAS,SAASC,GACvDhC,MAAMI,eAAiB4B,EAAEC,OAAOC,MAChCE,qBAKR5B,SAASI,qBAAqBmB,iBAAiB,SAAS,WAChDM,4BACArC,MAAMG,oBAAsBH,MAAMG,mBAClCgC,iCAKR3B,SAASa,kBAAkBU,iBAAiB,SAAS,WACjD/B,MAAMM,oBAAsBN,MAAMM,mBAClCgC,6BAIJ9B,SAASgB,cAAcO,iBAAiB,SAAS,WAC7C/B,MAAMO,gBAAkBP,MAAMO,eAC9BgC,yBAIJ/B,SAASmB,gBAAgBI,iBAAiB,SAAS,SAASC,GACpDA,EAAEC,SAAWzB,SAASoB,eACtBA,gBAEAI,EAAEC,SAAWzB,SAASqB,oBAmR9B7B,MAAMK,YAAa,EACnB+B,kBACAR,iBAlRQI,EAAEC,SAAWzB,SAASmB,iBACtBC,mBAKgBlB,SAAS8B,iBAAiB,6BAChCC,SAAQ,SAASC,OAC3BA,MAAMC,UACN3C,MAAMC,YAAcyC,MAAMR,OAE9BQ,MAAMX,iBAAiB,UAAU,SAASC,GAClCA,EAAEC,OAAOU,UACT3C,MAAMC,YAAc+B,EAAEC,OAAOC,MAC7BU,yBAMRpC,SAASQ,WACTR,SAASQ,UAAUe,iBAAiB,SAAS,WACrCc,iBACI7C,MAAMK,WAENG,SAASmB,gBAAgBmB,MAAMC,QAAU,QAEzC/C,MAAMK,YAAa,EACnB+B,uBAOQ,IAAI1C,YAAY,aACtBsD,GAAG,WAAW,SAAShB,GACrCA,EAAEiB,iBACFtD,IAAIuD,WAAW,SAAU,mBACxBC,MAAK,SAASC,YACPpD,MAAMqD,UACNC,QAAQ,CAAC,eAAe,SAASC,OAC7BA,MAAMC,IAAIJ,QAIdK,MAAML,KAEH,QAEVM,MAAM9D,aAAa+D,uBAYnBtB,iCACErC,MAAME,0BAA0B0D,OAAOC,OAAS,WAWlDhB,sBACE7C,MAAMI,eAAewD,OAAOC,OAAS,WAWvC1B,6BACWE,2BAGZ7B,SAASI,qBAAqBkD,UAAUC,OAAO,YAC/CvD,SAASM,4BAA4BgC,MAAMkB,OAAS,UACpDxD,SAASO,sBAAsB+B,MAAMC,QAAU,OAE3C/C,MAAMG,oBACNK,SAASI,qBAAqBkD,UAAUN,IAAI,UAC5C7D,IAAIuD,WAAW,gBAAiB,mBAAmBC,MAAK,SAASC,YAC7D5C,SAASK,qBAAqBoD,YAAcb,IACrC,QACRc,KAAKtE,aAAa+D,aAErBnD,SAASI,qBAAqBkD,UAAUC,OAAO,UAC/CpE,IAAIuD,WAAW,iBAAkB,mBAAmBC,MAAK,SAASC,YAC9D5C,SAASK,qBAAqBoD,YAAcb,IACrC,QACRc,KAAKtE,aAAa+D,cAGzBnD,SAASI,qBAAqBkD,UAAUC,OAAO,UAC/CvD,SAASI,qBAAqBkD,UAAUN,IAAI,YAC5ChD,SAASM,4BAA4BgC,MAAMkB,OAAS,cACpDrE,IAAIuD,WAAW,iBAAkB,mBAAmBC,MAAK,SAASC,YAC9D5C,SAASK,qBAAqBoD,YAAcb,IACrC,QACRc,KAAKtE,aAAa+D,WACrB3D,MAAMG,oBAAqB,GAE/BK,SAASC,KAAKD,SAASK,qBAAqBqB,MAAQlC,MAAMG,mBAAqB,EAAI,WAW9EyC,kBACApC,SAASY,WAAcyB,gBAAmB7C,MAAMK,YAGrDR,SAASsE,aAAa,kBAAmB,gBAAiBrE,OAAOsE,UAAW,CACpEC,SAAU,cAAgBrE,MAAMK,WAAa,EAAI,GACrD,gBAAkBiE,mBAAmB9D,SAASJ,eAAe8B,OAC7D,gBAAkBoC,mBAAmBtE,MAAMC,eAC5CkD,MAAK,SAASoB,KAAMC,WACnBzE,UAAU0E,oBAAoBjE,SAASY,UAAWmD,KAAMC,IACjD,QACRd,MAAM9D,aAAa+D,oBAWjBvB,kBACA5B,SAASJ,iBAGEyC,gBAGZrC,SAASQ,UAAU8C,UAAUC,OAAO,YACpCvD,SAASU,iBAAiB4B,MAAMkB,OAAS,UACzCxD,SAASW,WAAW2B,MAAMC,QAAU,OAEhC/C,MAAMK,YACNG,SAASQ,UAAU8C,UAAUN,IAAI,UACjC7D,IAAIuD,WAAW,gBAAiB,mBAAmBC,MAAK,SAASC,YAC7D5C,SAASS,UAAUgD,YAAcb,IAC1B,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASY,UAAU0B,MAAMC,QAAU,UAEnCvC,SAASQ,UAAU8C,UAAUC,OAAO,UACpCpE,IAAIuD,WAAW,iBAAkB,mBAAmBC,MAAK,SAASC,YAC9D5C,SAASS,UAAUgD,YAAcb,IAC1B,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASY,UAAU0B,MAAMC,QAAU,QAEvCH,oBAEApC,SAASQ,UAAU8C,UAAUC,OAAO,UACpCvD,SAASQ,UAAU8C,UAAUN,IAAI,YACjChD,SAASU,iBAAiB4B,MAAMkB,OAAS,cACzCrE,IAAIuD,WAAW,iBAAkB,mBAAmBC,MAAK,SAASC,YAC9D5C,SAASS,UAAUgD,YAAcb,IAC1B,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASY,UAAU0B,MAAMC,QAAU,OACnC/C,MAAMK,YAAa,GAEvBG,SAASC,KAAKD,SAASS,UAAUiB,MAAQlC,MAAMK,WAAa,EAAI,YAW3DiC,0BACDtC,MAAMM,oBACNE,SAASa,kBAAkByC,UAAUN,IAAI,UACzC7D,IAAIuD,WAAW,gBAAiB,mBAAmBC,MAAK,SAASC,YAC7D5C,SAASc,kBAAkB2C,YAAcb,IAClC,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASe,kBAAkBuB,MAAMC,QAAU,UAE3CvC,SAASa,kBAAkByC,UAAUC,OAAO,UAC5CpE,IAAIuD,WAAW,iBAAkB,mBAAmBC,MAAK,SAASC,YAC9D5C,SAASc,kBAAkB2C,YAAcb,IAClC,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASe,kBAAkBuB,MAAMC,QAAU,QAE/ClD,SAASsE,aAAa,kBAAmB,gBAAiBrE,OAAOsE,UAAW,CACxEC,SAAU,qBAAuBrE,MAAMM,mBAAqB,EAAI,KACjE6C,MAAK,SAASoB,KAAMC,WACnBzE,UAAU0E,oBAAoBjE,SAASe,kBAAmBgD,KAAMC,IACzD,QACRd,MAAM9D,aAAa+D,WAEtBnD,SAASC,KAAKD,SAASc,kBAAkBY,MAAQlC,MAAMM,mBAAqB,EAAI,WAW3EiC,sBACDvC,MAAMO,gBACNC,SAASgB,cAAcsC,UAAUN,IAAI,UACrC7D,IAAIuD,WAAW,gBAAiB,mBAAmBC,MAAK,SAASC,YAC7D5C,SAASiB,cAAcwC,YAAcb,IAC9B,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASkB,cAAcoB,MAAMC,QAAU,UAEvCvC,SAASgB,cAAcsC,UAAUC,OAAO,UACxCpE,IAAIuD,WAAW,iBAAkB,mBAAmBC,MAAK,SAASC,YAC9D5C,SAASiB,cAAcwC,YAAcb,IAC9B,QACRM,MAAM9D,aAAa+D,WACtBnD,SAASkB,cAAcoB,MAAMC,QAAU,QAE3CvC,SAASC,KAAKD,SAASiB,cAAcS,MAAQlC,MAAMO,eAAiB,EAAI,WAUnEqB,gBACLpB,SAASmB,gBAAgBmB,MAAMC,QAAU,cA/UzCvC,SAASN,4BACTF,MAAME,0BAA4BM,SAASN,0BAA0BgC,OAGrE1B,SAASJ,iBACTJ,MAAMI,eAAiBI,SAASJ,eAAe8B,OAG/C1B,SAASK,uBACTb,MAAMG,mBAAqF,IAAhEuE,SAASlE,SAASC,KAAKD,SAASK,qBAAqBqB,QAGhF1B,SAASS,YACTjB,MAAMK,WAAkE,IAArDqE,SAASlE,SAASC,KAAKD,SAASS,UAAUiB,QAG7D1B,SAASc,oBACTtB,MAAMM,mBAAkF,IAA7DoE,SAASlE,SAASC,KAAKD,SAASc,kBAAkBY,QAG7E1B,SAASiB,gBACTzB,MAAMO,eAA0E,IAAzDmE,SAASlE,SAASC,KAAKD,SAASiB,cAAcS,QAkVlE,CASHyC,KAAM,SAAStB,WACXrD,MAAMqD,UAAYA,UAClBvB,2BAGAK,6BACAC,kBACAE,0BACAC"}